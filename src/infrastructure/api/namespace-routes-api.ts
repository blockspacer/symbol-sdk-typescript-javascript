// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Catapult REST Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { AccountIds } from '../model';
import { NamespaceIds } from '../model';
import { NamespaceInfoDTO } from '../model';
import { NamespaceNameDTO } from '../model';
/**
 * NamespaceRoutesApi - axios parameter creator
 * @export
 */
export const NamespaceRoutesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets the namespace for a given namespaceId.
         * @summary Get namespace information
         * @param {string} namespaceId The namespace identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespace(namespaceId: string, options: any = {}): RequestArgs {
            // verify required parameter 'namespaceId' is not null or undefined
            if (namespaceId === null || namespaceId === undefined) {
                throw new RequiredError('namespaceId','Required parameter namespaceId was null or undefined when calling getNamespace.');
            }
            const localVarPath = `/namespace/{namespaceId}`
                .replace(`{${"namespaceId"}}`, encodeURIComponent(String(namespaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of namespaces for a given account address.
         * @summary Get namespaces owned by an account
         * @param {string} accountId The address or public key of the account.
         * @param {number} [pageSize] The number of namespaces to return.
         * @param {string} [id] The namespace id up to which namespace objects are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespacesFromAccount(accountId: string, pageSize?: number, id?: string, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getNamespacesFromAccount.');
            }
            const localVarPath = `/account/{accountId}/namespaces`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets namespaces for a given array of addresses.
         * @summary Get namespaces for given array of addresses
         * @param {AccountIds} accountIds 
         * @param {number} [pageSize] The number of namespaces to return.
         * @param {string} [id] The namespace id up to which namespace objects are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespacesFromAccounts(accountIds: AccountIds, pageSize?: number, id?: string, options: any = {}): RequestArgs {
            // verify required parameter 'accountIds' is not null or undefined
            if (accountIds === null || accountIds === undefined) {
                throw new RequiredError('accountIds','Required parameter accountIds was null or undefined when calling getNamespacesFromAccounts.');
            }
            const localVarPath = `/account/namespaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"AccountIds" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(accountIds !== undefined ? accountIds : {}) : (accountIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns friendly names for namespaces.
         * @summary Get readable names for a set of namespaces
         * @param {NamespaceIds} namespaceIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespacesNames(namespaceIds: NamespaceIds, options: any = {}): RequestArgs {
            // verify required parameter 'namespaceIds' is not null or undefined
            if (namespaceIds === null || namespaceIds === undefined) {
                throw new RequiredError('namespaceIds','Required parameter namespaceIds was null or undefined when calling getNamespacesNames.');
            }
            const localVarPath = `/namespace/names`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"NamespaceIds" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(namespaceIds !== undefined ? namespaceIds : {}) : (namespaceIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NamespaceRoutesApi - functional programming interface
 * @export
 */
export const NamespaceRoutesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Gets the namespace for a given namespaceId.
         * @summary Get namespace information
         * @param {string} namespaceId The namespace identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespace(namespaceId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamespaceInfoDTO> {
            const localVarAxiosArgs = NamespaceRoutesApiAxiosParamCreator(configuration).getNamespace(namespaceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets an array of namespaces for a given account address.
         * @summary Get namespaces owned by an account
         * @param {string} accountId The address or public key of the account.
         * @param {number} [pageSize] The number of namespaces to return.
         * @param {string} [id] The namespace id up to which namespace objects are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespacesFromAccount(accountId: string, pageSize?: number, id?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NamespaceInfoDTO>> {
            const localVarAxiosArgs = NamespaceRoutesApiAxiosParamCreator(configuration).getNamespacesFromAccount(accountId, pageSize, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets namespaces for a given array of addresses.
         * @summary Get namespaces for given array of addresses
         * @param {AccountIds} accountIds 
         * @param {number} [pageSize] The number of namespaces to return.
         * @param {string} [id] The namespace id up to which namespace objects are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespacesFromAccounts(accountIds: AccountIds, pageSize?: number, id?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NamespaceInfoDTO>> {
            const localVarAxiosArgs = NamespaceRoutesApiAxiosParamCreator(configuration).getNamespacesFromAccounts(accountIds, pageSize, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns friendly names for namespaces.
         * @summary Get readable names for a set of namespaces
         * @param {NamespaceIds} namespaceIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespacesNames(namespaceIds: NamespaceIds, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NamespaceNameDTO>> {
            const localVarAxiosArgs = NamespaceRoutesApiAxiosParamCreator(configuration).getNamespacesNames(namespaceIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NamespaceRoutesApi - factory interface
 * @export
 */
export const NamespaceRoutesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Gets the namespace for a given namespaceId.
         * @summary Get namespace information
         * @param {string} namespaceId The namespace identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespace(namespaceId: string, options?: any) {
            return NamespaceRoutesApiFp(configuration).getNamespace(namespaceId, options)(axios, basePath);
        },
        /**
         * Gets an array of namespaces for a given account address.
         * @summary Get namespaces owned by an account
         * @param {string} accountId The address or public key of the account.
         * @param {number} [pageSize] The number of namespaces to return.
         * @param {string} [id] The namespace id up to which namespace objects are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespacesFromAccount(accountId: string, pageSize?: number, id?: string, options?: any) {
            return NamespaceRoutesApiFp(configuration).getNamespacesFromAccount(accountId, pageSize, id, options)(axios, basePath);
        },
        /**
         * Gets namespaces for a given array of addresses.
         * @summary Get namespaces for given array of addresses
         * @param {AccountIds} accountIds 
         * @param {number} [pageSize] The number of namespaces to return.
         * @param {string} [id] The namespace id up to which namespace objects are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespacesFromAccounts(accountIds: AccountIds, pageSize?: number, id?: string, options?: any) {
            return NamespaceRoutesApiFp(configuration).getNamespacesFromAccounts(accountIds, pageSize, id, options)(axios, basePath);
        },
        /**
         * Returns friendly names for namespaces.
         * @summary Get readable names for a set of namespaces
         * @param {NamespaceIds} namespaceIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespacesNames(namespaceIds: NamespaceIds, options?: any) {
            return NamespaceRoutesApiFp(configuration).getNamespacesNames(namespaceIds, options)(axios, basePath);
        },
    };
};

/**
 * NamespaceRoutesApi - object-oriented interface
 * @export
 * @class NamespaceRoutesApi
 * @extends {BaseAPI}
 */
export class NamespaceRoutesApi extends BaseAPI {
    /**
     * Gets the namespace for a given namespaceId.
     * @summary Get namespace information
     * @param {string} namespaceId The namespace identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespaceRoutesApi
     */
    public getNamespace(namespaceId: string, options?: any) {
        return NamespaceRoutesApiFp(this.configuration).getNamespace(namespaceId, options)(this.axios, this.basePath);
    }

    /**
     * Gets an array of namespaces for a given account address.
     * @summary Get namespaces owned by an account
     * @param {string} accountId The address or public key of the account.
     * @param {number} [pageSize] The number of namespaces to return.
     * @param {string} [id] The namespace id up to which namespace objects are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespaceRoutesApi
     */
    public getNamespacesFromAccount(accountId: string, pageSize?: number, id?: string, options?: any) {
        return NamespaceRoutesApiFp(this.configuration).getNamespacesFromAccount(accountId, pageSize, id, options)(this.axios, this.basePath);
    }

    /**
     * Gets namespaces for a given array of addresses.
     * @summary Get namespaces for given array of addresses
     * @param {AccountIds} accountIds 
     * @param {number} [pageSize] The number of namespaces to return.
     * @param {string} [id] The namespace id up to which namespace objects are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespaceRoutesApi
     */
    public getNamespacesFromAccounts(accountIds: AccountIds, pageSize?: number, id?: string, options?: any) {
        return NamespaceRoutesApiFp(this.configuration).getNamespacesFromAccounts(accountIds, pageSize, id, options)(this.axios, this.basePath);
    }

    /**
     * Returns friendly names for namespaces.
     * @summary Get readable names for a set of namespaces
     * @param {NamespaceIds} namespaceIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespaceRoutesApi
     */
    public getNamespacesNames(namespaceIds: NamespaceIds, options?: any) {
        return NamespaceRoutesApiFp(this.configuration).getNamespacesNames(namespaceIds, options)(this.axios, this.basePath);
    }

}
