// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Catapult REST Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { BlockInfoDTO } from '../model';
import { MerkleProofInfoDTO } from '../model';
import { StatementsDTO } from '../model';
import { TransactionInfoDTO } from '../model';
/**
 * BlockRoutesApi - axios parameter creator
 * @export
 */
export const BlockRoutesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a block from the chain that has the given height.
         * @summary Get block information
         * @param {number} height The height of the block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight(height: number, options: any = {}): RequestArgs {
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError('height','Required parameter height was null or undefined when calling getBlockByHeight.');
            }
            const localVarPath = `/block/{height}`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the receipts linked to a block.
         * @summary Get receipts from a block
         * @param {number} height The height of the block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockReceipts(height: number, options: any = {}): RequestArgs {
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError('height','Required parameter height was null or undefined when calling getBlockReceipts.');
            }
            const localVarPath = `/block/{height}/receipts`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of transactions included in a block for a given block height.
         * @summary Get transactions from a block
         * @param {number} height The height of the block.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockTransactions(height: number, pageSize?: number, id?: string, options: any = {}): RequestArgs {
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError('height','Required parameter height was null or undefined when calling getBlockTransactions.');
            }
            const localVarPath = `/block/{height}/transactions`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets up to limit number of blocks after given block height.
         * @summary Get blocks information
         * @param {number} height The height of the block. If height -1 is not a multiple of the limit provided, the inferior closest multiple + 1 is used instead.
         * @param {25 | 50 | 75 | 100} limit The number of blocks to be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlocksByHeightWithLimit(height: number, limit: 25 | 50 | 75 | 100, options: any = {}): RequestArgs {
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError('height','Required parameter height was null or undefined when calling getBlocksByHeightWithLimit.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling getBlocksByHeightWithLimit.');
            }
            const localVarPath = `/blocks/{height}/limit/{limit}`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)))
                .replace(`{${"limit"}}`, encodeURIComponent(String(limit)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the merkle path for a receipt statement or resolution linked to a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the receipt was linked with the block. 
         * @summary Get the merkle path for a given a receipt statement hash and block
         * @param {number} height The height of the block.
         * @param {string} hash The hash of the receipt statement or resolution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerkleReceipts(height: number, hash: string, options: any = {}): RequestArgs {
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError('height','Required parameter height was null or undefined when calling getMerkleReceipts.');
            }
            // verify required parameter 'hash' is not null or undefined
            if (hash === null || hash === undefined) {
                throw new RequiredError('hash','Required parameter hash was null or undefined when calling getMerkleReceipts.');
            }
            const localVarPath = `/block/{height}/receipt/{hash}/merkle`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)))
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the merkle path for a transaction included in a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the transaction was included in the block. 
         * @summary Get the merkle path for a given a transaction and block
         * @param {number} height The height of the block.
         * @param {string} hash The hash of the transaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerkleTransaction(height: number, hash: string, options: any = {}): RequestArgs {
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError('height','Required parameter height was null or undefined when calling getMerkleTransaction.');
            }
            // verify required parameter 'hash' is not null or undefined
            if (hash === null || hash === undefined) {
                throw new RequiredError('hash','Required parameter hash was null or undefined when calling getMerkleTransaction.');
            }
            const localVarPath = `/block/{height}/transaction/{hash}/merkle`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)))
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlockRoutesApi - functional programming interface
 * @export
 */
export const BlockRoutesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Gets a block from the chain that has the given height.
         * @summary Get block information
         * @param {number} height The height of the block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight(height: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockInfoDTO> {
            const localVarAxiosArgs = BlockRoutesApiAxiosParamCreator(configuration).getBlockByHeight(height, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the receipts linked to a block.
         * @summary Get receipts from a block
         * @param {number} height The height of the block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockReceipts(height: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatementsDTO> {
            const localVarAxiosArgs = BlockRoutesApiAxiosParamCreator(configuration).getBlockReceipts(height, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of transactions included in a block for a given block height.
         * @summary Get transactions from a block
         * @param {number} height The height of the block.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockTransactions(height: number, pageSize?: number, id?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransactionInfoDTO>> {
            const localVarAxiosArgs = BlockRoutesApiAxiosParamCreator(configuration).getBlockTransactions(height, pageSize, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets up to limit number of blocks after given block height.
         * @summary Get blocks information
         * @param {number} height The height of the block. If height -1 is not a multiple of the limit provided, the inferior closest multiple + 1 is used instead.
         * @param {25 | 50 | 75 | 100} limit The number of blocks to be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlocksByHeightWithLimit(height: number, limit: 25 | 50 | 75 | 100, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlockInfoDTO>> {
            const localVarAxiosArgs = BlockRoutesApiAxiosParamCreator(configuration).getBlocksByHeightWithLimit(height, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the merkle path for a receipt statement or resolution linked to a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the receipt was linked with the block. 
         * @summary Get the merkle path for a given a receipt statement hash and block
         * @param {number} height The height of the block.
         * @param {string} hash The hash of the receipt statement or resolution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerkleReceipts(height: number, hash: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerkleProofInfoDTO> {
            const localVarAxiosArgs = BlockRoutesApiAxiosParamCreator(configuration).getMerkleReceipts(height, hash, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the merkle path for a transaction included in a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the transaction was included in the block. 
         * @summary Get the merkle path for a given a transaction and block
         * @param {number} height The height of the block.
         * @param {string} hash The hash of the transaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerkleTransaction(height: number, hash: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerkleProofInfoDTO> {
            const localVarAxiosArgs = BlockRoutesApiAxiosParamCreator(configuration).getMerkleTransaction(height, hash, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BlockRoutesApi - factory interface
 * @export
 */
export const BlockRoutesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Gets a block from the chain that has the given height.
         * @summary Get block information
         * @param {number} height The height of the block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight(height: number, options?: any) {
            return BlockRoutesApiFp(configuration).getBlockByHeight(height, options)(axios, basePath);
        },
        /**
         * Returns the receipts linked to a block.
         * @summary Get receipts from a block
         * @param {number} height The height of the block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockReceipts(height: number, options?: any) {
            return BlockRoutesApiFp(configuration).getBlockReceipts(height, options)(axios, basePath);
        },
        /**
         * Returns an array of transactions included in a block for a given block height.
         * @summary Get transactions from a block
         * @param {number} height The height of the block.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockTransactions(height: number, pageSize?: number, id?: string, options?: any) {
            return BlockRoutesApiFp(configuration).getBlockTransactions(height, pageSize, id, options)(axios, basePath);
        },
        /**
         * Gets up to limit number of blocks after given block height.
         * @summary Get blocks information
         * @param {number} height The height of the block. If height -1 is not a multiple of the limit provided, the inferior closest multiple + 1 is used instead.
         * @param {25 | 50 | 75 | 100} limit The number of blocks to be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlocksByHeightWithLimit(height: number, limit: 25 | 50 | 75 | 100, options?: any) {
            return BlockRoutesApiFp(configuration).getBlocksByHeightWithLimit(height, limit, options)(axios, basePath);
        },
        /**
         * Returns the merkle path for a receipt statement or resolution linked to a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the receipt was linked with the block. 
         * @summary Get the merkle path for a given a receipt statement hash and block
         * @param {number} height The height of the block.
         * @param {string} hash The hash of the receipt statement or resolution.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerkleReceipts(height: number, hash: string, options?: any) {
            return BlockRoutesApiFp(configuration).getMerkleReceipts(height, hash, options)(axios, basePath);
        },
        /**
         * Returns the merkle path for a transaction included in a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the transaction was included in the block. 
         * @summary Get the merkle path for a given a transaction and block
         * @param {number} height The height of the block.
         * @param {string} hash The hash of the transaction.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerkleTransaction(height: number, hash: string, options?: any) {
            return BlockRoutesApiFp(configuration).getMerkleTransaction(height, hash, options)(axios, basePath);
        },
    };
};

/**
 * BlockRoutesApi - object-oriented interface
 * @export
 * @class BlockRoutesApi
 * @extends {BaseAPI}
 */
export class BlockRoutesApi extends BaseAPI {
    /**
     * Gets a block from the chain that has the given height.
     * @summary Get block information
     * @param {number} height The height of the block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockRoutesApi
     */
    public getBlockByHeight(height: number, options?: any) {
        return BlockRoutesApiFp(this.configuration).getBlockByHeight(height, options)(this.axios, this.basePath);
    }

    /**
     * Returns the receipts linked to a block.
     * @summary Get receipts from a block
     * @param {number} height The height of the block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockRoutesApi
     */
    public getBlockReceipts(height: number, options?: any) {
        return BlockRoutesApiFp(this.configuration).getBlockReceipts(height, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of transactions included in a block for a given block height.
     * @summary Get transactions from a block
     * @param {number} height The height of the block.
     * @param {number} [pageSize] The number of transactions to return for each request.
     * @param {string} [id] The transaction id up to which transactions are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockRoutesApi
     */
    public getBlockTransactions(height: number, pageSize?: number, id?: string, options?: any) {
        return BlockRoutesApiFp(this.configuration).getBlockTransactions(height, pageSize, id, options)(this.axios, this.basePath);
    }

    /**
     * Gets up to limit number of blocks after given block height.
     * @summary Get blocks information
     * @param {number} height The height of the block. If height -1 is not a multiple of the limit provided, the inferior closest multiple + 1 is used instead.
     * @param {25 | 50 | 75 | 100} limit The number of blocks to be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockRoutesApi
     */
    public getBlocksByHeightWithLimit(height: number, limit: 25 | 50 | 75 | 100, options?: any) {
        return BlockRoutesApiFp(this.configuration).getBlocksByHeightWithLimit(height, limit, options)(this.axios, this.basePath);
    }

    /**
     * Returns the merkle path for a receipt statement or resolution linked to a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the receipt was linked with the block. 
     * @summary Get the merkle path for a given a receipt statement hash and block
     * @param {number} height The height of the block.
     * @param {string} hash The hash of the receipt statement or resolution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockRoutesApi
     */
    public getMerkleReceipts(height: number, hash: string, options?: any) {
        return BlockRoutesApiFp(this.configuration).getMerkleReceipts(height, hash, options)(this.axios, this.basePath);
    }

    /**
     * Returns the merkle path for a transaction included in a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the transaction was included in the block. 
     * @summary Get the merkle path for a given a transaction and block
     * @param {number} height The height of the block.
     * @param {string} hash The hash of the transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockRoutesApi
     */
    public getMerkleTransaction(height: number, hash: string, options?: any) {
        return BlockRoutesApiFp(this.configuration).getMerkleTransaction(height, hash, options)(this.axios, this.basePath);
    }

}
