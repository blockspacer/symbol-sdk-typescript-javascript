// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Catapult REST Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { NetworkTypeDTO } from '../model';
/**
 * NetworkRoutesApi - axios parameter creator
 * @export
 */
export const NetworkRoutesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the current network type.
         * @summary Get the current network type of the chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworkType(options: any = {}): RequestArgs {
            const localVarPath = `/network`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NetworkRoutesApi - functional programming interface
 * @export
 */
export const NetworkRoutesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the current network type.
         * @summary Get the current network type of the chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworkType(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkTypeDTO> {
            const localVarAxiosArgs = NetworkRoutesApiAxiosParamCreator(configuration).getNetworkType(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NetworkRoutesApi - factory interface
 * @export
 */
export const NetworkRoutesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the current network type.
         * @summary Get the current network type of the chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworkType(options?: any) {
            return NetworkRoutesApiFp(configuration).getNetworkType(options)(axios, basePath);
        },
    };
};

/**
 * NetworkRoutesApi - object-oriented interface
 * @export
 * @class NetworkRoutesApi
 * @extends {BaseAPI}
 */
export class NetworkRoutesApi extends BaseAPI {
    /**
     * Returns the current network type.
     * @summary Get the current network type of the chain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkRoutesApi
     */
    public getNetworkType(options?: any) {
        return NetworkRoutesApiFp(this.configuration).getNetworkType(options)(this.axios, this.basePath);
    }

}
