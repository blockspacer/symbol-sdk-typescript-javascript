// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Catapult REST Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { AccountIds } from '../model';
import { AccountInfoDTO } from '../model';
import { AccountNamesDTO } from '../model';
import { AccountRestrictionsInfoDTO } from '../model';
import { MultisigAccountGraphInfoDTO } from '../model';
import { MultisigAccountInfoDTO } from '../model';
import { TransactionInfoDTO } from '../model';
/**
 * AccountRoutesApi - axios parameter creator
 * @export
 */
export const AccountRoutesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the account information.
         * @summary Get account information
         * @param {string} accountId The public key or address of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountInfo(accountId: string, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getAccountInfo.');
            }
            const localVarPath = `/account/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the multisig account information.
         * @summary Get multisig account information
         * @param {string} accountId The public key or address of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountMultisig(accountId: string, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getAccountMultisig.');
            }
            const localVarPath = `/account/{accountId}/multisig`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the multisig account graph.
         * @summary Get multisig account graph information
         * @param {string} accountId The public key or address of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountMultisigGraph(accountId: string, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getAccountMultisigGraph.');
            }
            const localVarPath = `/account/{accountId}/multisig/graph`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the account restrictions for a given account.
         * @summary Get the account restrictions
         * @param {string} accountId The public key or address of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountRestrictions(accountId: string, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getAccountRestrictions.');
            }
            const localVarPath = `/account/{accountId}/restrictions/`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the account restrictions for a given array of addresses.
         * @summary Get account restrictions for given array of addresses
         * @param {AccountIds} accountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountRestrictionsFromAccounts(accountIds: AccountIds, options: any = {}): RequestArgs {
            // verify required parameter 'accountIds' is not null or undefined
            if (accountIds === null || accountIds === undefined) {
                throw new RequiredError('accountIds','Required parameter accountIds was null or undefined when calling getAccountRestrictionsFromAccounts.');
            }
            const localVarPath = `/account/restrictions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"AccountIds" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(accountIds !== undefined ? accountIds : {}) : (accountIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the account information for an array of accounts.
         * @summary Get accounts information
         * @param {AccountIds} accountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsInfo(accountIds: AccountIds, options: any = {}): RequestArgs {
            // verify required parameter 'accountIds' is not null or undefined
            if (accountIds === null || accountIds === undefined) {
                throw new RequiredError('accountIds','Required parameter accountIds was null or undefined when calling getAccountsInfo.');
            }
            const localVarPath = `/account`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"AccountIds" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(accountIds !== undefined ? accountIds : {}) : (accountIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns friendly names for accounts.
         * @summary Get readable names for a set of accountIds.
         * @param {AccountIds} accountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsNames(accountIds: AccountIds, options: any = {}): RequestArgs {
            // verify required parameter 'accountIds' is not null or undefined
            if (accountIds === null || accountIds === undefined) {
                throw new RequiredError('accountIds','Required parameter accountIds was null or undefined when calling getAccountsNames.');
            }
            const localVarPath = `/account/names`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"AccountIds" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(accountIds !== undefined ? accountIds : {}) : (accountIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction. 
         * @summary Get incoming transactions
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria: * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomingTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options: any = {}): RequestArgs {
            // verify required parameter 'publicKey' is not null or undefined
            if (publicKey === null || publicKey === undefined) {
                throw new RequiredError('publicKey','Required parameter publicKey was null or undefined when calling incomingTransactions.');
            }
            const localVarPath = `/account/{publicKey}/transactions/incoming`
                .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
         * @summary Get outgoing transactions
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria: * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outgoingTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options: any = {}): RequestArgs {
            // verify required parameter 'publicKey' is not null or undefined
            if (publicKey === null || publicKey === undefined) {
                throw new RequiredError('publicKey','Required parameter publicKey was null or undefined when calling outgoingTransactions.');
            }
            const localVarPath = `/account/{publicKey}/transactions/outgoing`
                .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of aggregate bonded transactions where the account is the sender or requires to cosign the transaction. 
         * @summary Get aggregate bonded transactions information
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria. * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options: any = {}): RequestArgs {
            // verify required parameter 'publicKey' is not null or undefined
            if (publicKey === null || publicKey === undefined) {
                throw new RequiredError('publicKey','Required parameter publicKey was null or undefined when calling partialTransactions.');
            }
            const localVarPath = `/account/{publicKey}/transactions/partial`
                .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of transactions for which an account is the sender or receiver.
         * @summary Get confirmed transactions
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria: * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options: any = {}): RequestArgs {
            // verify required parameter 'publicKey' is not null or undefined
            if (publicKey === null || publicKey === undefined) {
                throw new RequiredError('publicKey','Required parameter publicKey was null or undefined when calling transactions.');
            }
            const localVarPath = `/account/{publicKey}/transactions`
                .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the array of transactions not included in a block where an account is the sender or receiver. 
         * @summary Get unconfirmed transactions
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria. * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unconfirmedTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options: any = {}): RequestArgs {
            // verify required parameter 'publicKey' is not null or undefined
            if (publicKey === null || publicKey === undefined) {
                throw new RequiredError('publicKey','Required parameter publicKey was null or undefined when calling unconfirmedTransactions.');
            }
            const localVarPath = `/account/{publicKey}/transactions/unconfirmed`
                .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountRoutesApi - functional programming interface
 * @export
 */
export const AccountRoutesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the account information.
         * @summary Get account information
         * @param {string} accountId The public key or address of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountInfo(accountId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountInfoDTO> {
            const localVarAxiosArgs = AccountRoutesApiAxiosParamCreator(configuration).getAccountInfo(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the multisig account information.
         * @summary Get multisig account information
         * @param {string} accountId The public key or address of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountMultisig(accountId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultisigAccountInfoDTO> {
            const localVarAxiosArgs = AccountRoutesApiAxiosParamCreator(configuration).getAccountMultisig(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the multisig account graph.
         * @summary Get multisig account graph information
         * @param {string} accountId The public key or address of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountMultisigGraph(accountId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MultisigAccountGraphInfoDTO>> {
            const localVarAxiosArgs = AccountRoutesApiAxiosParamCreator(configuration).getAccountMultisigGraph(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the account restrictions for a given account.
         * @summary Get the account restrictions
         * @param {string} accountId The public key or address of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountRestrictions(accountId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountRestrictionsInfoDTO> {
            const localVarAxiosArgs = AccountRoutesApiAxiosParamCreator(configuration).getAccountRestrictions(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the account restrictions for a given array of addresses.
         * @summary Get account restrictions for given array of addresses
         * @param {AccountIds} accountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountRestrictionsFromAccounts(accountIds: AccountIds, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountRestrictionsInfoDTO>> {
            const localVarAxiosArgs = AccountRoutesApiAxiosParamCreator(configuration).getAccountRestrictionsFromAccounts(accountIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the account information for an array of accounts.
         * @summary Get accounts information
         * @param {AccountIds} accountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsInfo(accountIds: AccountIds, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountInfoDTO>> {
            const localVarAxiosArgs = AccountRoutesApiAxiosParamCreator(configuration).getAccountsInfo(accountIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns friendly names for accounts.
         * @summary Get readable names for a set of accountIds.
         * @param {AccountIds} accountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsNames(accountIds: AccountIds, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountNamesDTO>> {
            const localVarAxiosArgs = AccountRoutesApiAxiosParamCreator(configuration).getAccountsNames(accountIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction. 
         * @summary Get incoming transactions
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria: * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomingTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransactionInfoDTO>> {
            const localVarAxiosArgs = AccountRoutesApiAxiosParamCreator(configuration).incomingTransactions(publicKey, pageSize, id, ordering, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
         * @summary Get outgoing transactions
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria: * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outgoingTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransactionInfoDTO>> {
            const localVarAxiosArgs = AccountRoutesApiAxiosParamCreator(configuration).outgoingTransactions(publicKey, pageSize, id, ordering, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets an array of aggregate bonded transactions where the account is the sender or requires to cosign the transaction. 
         * @summary Get aggregate bonded transactions information
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria. * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransactionInfoDTO>> {
            const localVarAxiosArgs = AccountRoutesApiAxiosParamCreator(configuration).partialTransactions(publicKey, pageSize, id, ordering, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets an array of transactions for which an account is the sender or receiver.
         * @summary Get confirmed transactions
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria: * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransactionInfoDTO>> {
            const localVarAxiosArgs = AccountRoutesApiAxiosParamCreator(configuration).transactions(publicKey, pageSize, id, ordering, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the array of transactions not included in a block where an account is the sender or receiver. 
         * @summary Get unconfirmed transactions
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria. * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unconfirmedTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransactionInfoDTO>> {
            const localVarAxiosArgs = AccountRoutesApiAxiosParamCreator(configuration).unconfirmedTransactions(publicKey, pageSize, id, ordering, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountRoutesApi - factory interface
 * @export
 */
export const AccountRoutesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the account information.
         * @summary Get account information
         * @param {string} accountId The public key or address of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountInfo(accountId: string, options?: any) {
            return AccountRoutesApiFp(configuration).getAccountInfo(accountId, options)(axios, basePath);
        },
        /**
         * Returns the multisig account information.
         * @summary Get multisig account information
         * @param {string} accountId The public key or address of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountMultisig(accountId: string, options?: any) {
            return AccountRoutesApiFp(configuration).getAccountMultisig(accountId, options)(axios, basePath);
        },
        /**
         * Returns the multisig account graph.
         * @summary Get multisig account graph information
         * @param {string} accountId The public key or address of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountMultisigGraph(accountId: string, options?: any) {
            return AccountRoutesApiFp(configuration).getAccountMultisigGraph(accountId, options)(axios, basePath);
        },
        /**
         * Returns the account restrictions for a given account.
         * @summary Get the account restrictions
         * @param {string} accountId The public key or address of the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountRestrictions(accountId: string, options?: any) {
            return AccountRoutesApiFp(configuration).getAccountRestrictions(accountId, options)(axios, basePath);
        },
        /**
         * Returns the account restrictions for a given array of addresses.
         * @summary Get account restrictions for given array of addresses
         * @param {AccountIds} accountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountRestrictionsFromAccounts(accountIds: AccountIds, options?: any) {
            return AccountRoutesApiFp(configuration).getAccountRestrictionsFromAccounts(accountIds, options)(axios, basePath);
        },
        /**
         * Returns the account information for an array of accounts.
         * @summary Get accounts information
         * @param {AccountIds} accountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsInfo(accountIds: AccountIds, options?: any) {
            return AccountRoutesApiFp(configuration).getAccountsInfo(accountIds, options)(axios, basePath);
        },
        /**
         * Returns friendly names for accounts.
         * @summary Get readable names for a set of accountIds.
         * @param {AccountIds} accountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsNames(accountIds: AccountIds, options?: any) {
            return AccountRoutesApiFp(configuration).getAccountsNames(accountIds, options)(axios, basePath);
        },
        /**
         * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction. 
         * @summary Get incoming transactions
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria: * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomingTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any) {
            return AccountRoutesApiFp(configuration).incomingTransactions(publicKey, pageSize, id, ordering, options)(axios, basePath);
        },
        /**
         * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
         * @summary Get outgoing transactions
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria: * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outgoingTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any) {
            return AccountRoutesApiFp(configuration).outgoingTransactions(publicKey, pageSize, id, ordering, options)(axios, basePath);
        },
        /**
         * Gets an array of aggregate bonded transactions where the account is the sender or requires to cosign the transaction. 
         * @summary Get aggregate bonded transactions information
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria. * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any) {
            return AccountRoutesApiFp(configuration).partialTransactions(publicKey, pageSize, id, ordering, options)(axios, basePath);
        },
        /**
         * Gets an array of transactions for which an account is the sender or receiver.
         * @summary Get confirmed transactions
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria: * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any) {
            return AccountRoutesApiFp(configuration).transactions(publicKey, pageSize, id, ordering, options)(axios, basePath);
        },
        /**
         * Gets the array of transactions not included in a block where an account is the sender or receiver. 
         * @summary Get unconfirmed transactions
         * @param {string} publicKey The public key of the account.
         * @param {number} [pageSize] The number of transactions to return for each request.
         * @param {string} [id] The transaction id up to which transactions are returned. 
         * @param {string} [ordering] The ordering criteria. * -id - Descending order by id. * id - Ascending order by id. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unconfirmedTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any) {
            return AccountRoutesApiFp(configuration).unconfirmedTransactions(publicKey, pageSize, id, ordering, options)(axios, basePath);
        },
    };
};

/**
 * AccountRoutesApi - object-oriented interface
 * @export
 * @class AccountRoutesApi
 * @extends {BaseAPI}
 */
export class AccountRoutesApi extends BaseAPI {
    /**
     * Returns the account information.
     * @summary Get account information
     * @param {string} accountId The public key or address of the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRoutesApi
     */
    public getAccountInfo(accountId: string, options?: any) {
        return AccountRoutesApiFp(this.configuration).getAccountInfo(accountId, options)(this.axios, this.basePath);
    }

    /**
     * Returns the multisig account information.
     * @summary Get multisig account information
     * @param {string} accountId The public key or address of the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRoutesApi
     */
    public getAccountMultisig(accountId: string, options?: any) {
        return AccountRoutesApiFp(this.configuration).getAccountMultisig(accountId, options)(this.axios, this.basePath);
    }

    /**
     * Returns the multisig account graph.
     * @summary Get multisig account graph information
     * @param {string} accountId The public key or address of the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRoutesApi
     */
    public getAccountMultisigGraph(accountId: string, options?: any) {
        return AccountRoutesApiFp(this.configuration).getAccountMultisigGraph(accountId, options)(this.axios, this.basePath);
    }

    /**
     * Returns the account restrictions for a given account.
     * @summary Get the account restrictions
     * @param {string} accountId The public key or address of the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRoutesApi
     */
    public getAccountRestrictions(accountId: string, options?: any) {
        return AccountRoutesApiFp(this.configuration).getAccountRestrictions(accountId, options)(this.axios, this.basePath);
    }

    /**
     * Returns the account restrictions for a given array of addresses.
     * @summary Get account restrictions for given array of addresses
     * @param {AccountIds} accountIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRoutesApi
     */
    public getAccountRestrictionsFromAccounts(accountIds: AccountIds, options?: any) {
        return AccountRoutesApiFp(this.configuration).getAccountRestrictionsFromAccounts(accountIds, options)(this.axios, this.basePath);
    }

    /**
     * Returns the account information for an array of accounts.
     * @summary Get accounts information
     * @param {AccountIds} accountIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRoutesApi
     */
    public getAccountsInfo(accountIds: AccountIds, options?: any) {
        return AccountRoutesApiFp(this.configuration).getAccountsInfo(accountIds, options)(this.axios, this.basePath);
    }

    /**
     * Returns friendly names for accounts.
     * @summary Get readable names for a set of accountIds.
     * @param {AccountIds} accountIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRoutesApi
     */
    public getAccountsNames(accountIds: AccountIds, options?: any) {
        return AccountRoutesApiFp(this.configuration).getAccountsNames(accountIds, options)(this.axios, this.basePath);
    }

    /**
     * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction. 
     * @summary Get incoming transactions
     * @param {string} publicKey The public key of the account.
     * @param {number} [pageSize] The number of transactions to return for each request.
     * @param {string} [id] The transaction id up to which transactions are returned. 
     * @param {string} [ordering] The ordering criteria: * -id - Descending order by id. * id - Ascending order by id. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRoutesApi
     */
    public incomingTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any) {
        return AccountRoutesApiFp(this.configuration).incomingTransactions(publicKey, pageSize, id, ordering, options)(this.axios, this.basePath);
    }

    /**
     * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
     * @summary Get outgoing transactions
     * @param {string} publicKey The public key of the account.
     * @param {number} [pageSize] The number of transactions to return for each request.
     * @param {string} [id] The transaction id up to which transactions are returned. 
     * @param {string} [ordering] The ordering criteria: * -id - Descending order by id. * id - Ascending order by id. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRoutesApi
     */
    public outgoingTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any) {
        return AccountRoutesApiFp(this.configuration).outgoingTransactions(publicKey, pageSize, id, ordering, options)(this.axios, this.basePath);
    }

    /**
     * Gets an array of aggregate bonded transactions where the account is the sender or requires to cosign the transaction. 
     * @summary Get aggregate bonded transactions information
     * @param {string} publicKey The public key of the account.
     * @param {number} [pageSize] The number of transactions to return for each request.
     * @param {string} [id] The transaction id up to which transactions are returned. 
     * @param {string} [ordering] The ordering criteria. * -id - Descending order by id. * id - Ascending order by id. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRoutesApi
     */
    public partialTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any) {
        return AccountRoutesApiFp(this.configuration).partialTransactions(publicKey, pageSize, id, ordering, options)(this.axios, this.basePath);
    }

    /**
     * Gets an array of transactions for which an account is the sender or receiver.
     * @summary Get confirmed transactions
     * @param {string} publicKey The public key of the account.
     * @param {number} [pageSize] The number of transactions to return for each request.
     * @param {string} [id] The transaction id up to which transactions are returned. 
     * @param {string} [ordering] The ordering criteria: * -id - Descending order by id. * id - Ascending order by id. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRoutesApi
     */
    public transactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any) {
        return AccountRoutesApiFp(this.configuration).transactions(publicKey, pageSize, id, ordering, options)(this.axios, this.basePath);
    }

    /**
     * Gets the array of transactions not included in a block where an account is the sender or receiver. 
     * @summary Get unconfirmed transactions
     * @param {string} publicKey The public key of the account.
     * @param {number} [pageSize] The number of transactions to return for each request.
     * @param {string} [id] The transaction id up to which transactions are returned. 
     * @param {string} [ordering] The ordering criteria. * -id - Descending order by id. * id - Ascending order by id. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountRoutesApi
     */
    public unconfirmedTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: any) {
        return AccountRoutesApiFp(this.configuration).unconfirmedTransactions(publicKey, pageSize, id, ordering, options)(this.axios, this.basePath);
    }

}
